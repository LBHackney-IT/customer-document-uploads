service: customer-document-uploads

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:ListBucket
      Resource: '*'
  environment:
    DROPBOXES_TABLE: '${self:service}-${self:provider.stage}-dropboxes'
    REQUESTS_TABLE: '${self:service}-${self:provider.stage}-requests'
    UPLOADS_BUCKET: '${self:service}-${self:provider.stage}-uploads'
    SENTRY_DSN: ${ssm:/customer-document-uploads/SENTRY_DSN}
    URL_PREFIX: ${self:custom.endpoints.${self:provider.stage}}
    MAX_UPLOAD_BYTES: 20_971_520
    jwtsecret: ${ssm:/common/hackney-jwt-secret}
    CUSTOMER_TOKEN_SECRET: ${ssm:/common/customer-jwt-secret~true}
    stage: ${self:provider.stage}
    EVIDENCE_STORE_URL: ${self:custom.evidenceStoreUrls.${self:provider.stage}}
    EVIDENCE_STORE_TOKEN: ${ssm:/customer-document-uploads/evidence-store-token~true}

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
  endpoints:
    dev: http://localhost:3000
    test: http://localhost:3000
    staging: https://staging.uploads.hackney.gov.uk
    production: https://uploads.hackney.gov.uk
  evidenceStoreUrls:
    dev: http://localhost:5050
    test: https://staging-evidence-store.api.hackney.gov.uk
    staging: https://staging-evidence-store.api.hackney.gov.uk
    production: https://evidence-store.api.hackney.gov.uk

plugins:
  - serverless-offline
  - serverless-offline-ssm
  - serverless-dynamodb-local

package:
  individually: true
  exclude:
    - ./**

functions:
  saveDropbox:
    handler: lambda.saveDropboxHandler
    package:
      include:
        - lambda.js
        - lib/**
        - static/**
        - templates/**
        - node_modules/**
    events:
      - http:
          path: '/dropboxes/{dropboxId}'
          method: POST
  app:
    handler: lambda.appHandler
    package:
      include:
        - lambda.js
        - lib/**
        - static/**
        - templates/**
        - node_modules/**
    events:
      - http: GET /
      - http:
          path: /assets/{proxy+}
          method: GET
      - http:
          path: /requests
          method: POST
          cors: true
      - http:
          path: /{proxy+}
          method: ANY

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.UPLOADS_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    UploadsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: dropboxId
            AttributeType: S
        KeySchema:
          - AttributeName: dropboxId
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:provider.environment.DROPBOXES_TABLE}
    RequestsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:provider.environment.REQUESTS_TABLE}
